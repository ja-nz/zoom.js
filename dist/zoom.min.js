(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.i=function(value){return value};__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{configurable:false,enumerable:true,get:getter})}};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=0)})([function(module,exports){eval('/**\n * Pure JavaScript implementation of zoom.js.\n *\n * Original preamble:\n * zoom.js - It\'s the best way to zoom an image\n * @version v0.0.2\n * @link https://github.com/fat/zoom.js\n * @license MIT\n *\n * Needs a related CSS file to work. See the README at\n * https://github.com/nishanths/zoom.js for more info.\n *\n * This is a fork of the original zoom.js implementation by @fat.\n * Copyrights for the original project are held by @fat. All other copyright\n * for changes in the fork are held by Nishanth Shanmugham.\n *\n * Copyright (c) 2013 @fat\n * The MIT License. Copyright Â© 2016 Nishanth Shanmugham.\n */\n\n\n\nclass ZoomJS extends HTMLElement {\n\n    constructor() {\n        super();\n        this.zoom = this.firstElementChild;\n        this.zoomEvents = {\n            zoomOutHandler: () => this.zoomOut.call(this.zoom),\n            keyUp: e => {\n                if (e.keyCode == 27) this.zoomEvents.zoomOutHandler();\n            },\n            handleTouchStart: e => {\n                let initialTouchPos = -1;\n                const t = e.touches[0];\n                initialTouchPos = t.pageY;\n                e.target.addEventListener("touchmove", e => this.zoomEvents.handleTouchMove(e, initialTouchPos));\n            },\n            handleTouchMove: (e, i) => {\n                const t = e.touches[0];\n                if (Math.abs(t.pageY - i) > 10) {\n                    this.zoomEvents.zoomOutHandler();\n                    e.target.removeEventListener("touchmove", this);\n                }\n            }\n        };\n    }\n    connectedCallback() {\n        if (this.zoom) {\n            this.zoom.style.cursor = "zoom-in";\n            this.addEventListener("click", e => {\n                if (e.metaKey || e.ctrlKey) {\n                    window.open(e.target.src);\n                    return this.connectedCallback();\n                }\n                if (e.target.width >= document.documentElement.clientWidth - 80) {\n                    return Error("Image exceeds screen width");\n                }\n                this.zoomIn.call(this.zoom);\n                this.zoomListeners();\n                return "zoomed";\n            }, { once: true });\n        }\n    }\n    zoomIn() {\n        const offset = 80;\n        this.preservedTransform = this.style.transform;\n        const scale = (() => {\n            const maxScaleFactor = this.naturalWidth / this.width;\n            const viewportWidth = document.documentElement.clientWidth - offset;\n            const viewportHeight = document.documentElement.clientHeight - offset;\n            const imageAspectRatio = this.naturalWidth / this.naturalHeight;\n            const viewportAspectRatio = viewportWidth / viewportHeight;\n\n            if (this.naturalWidth < viewportWidth && this.naturalHeight < viewportHeight) {\n                return maxScaleFactor;\n            } else if (imageAspectRatio < viewportAspectRatio) {\n                return (viewportHeight / this.naturalHeight) * maxScaleFactor;\n            } else {\n                return (viewportWidth / this.naturalWidth) * maxScaleFactor;\n            }\n        })();\n\n        const imageOffset = (() => {\n            const rect = this.getBoundingClientRect();\n            return {\n                top: rect.top + window.pageYOffset - document.documentElement.clientTop,\n                left: rect.left + window.pageXOffset - document.documentElement.clientLeft\n            };\n        })();\n\n        Object.assign(this.parentElement.style, {\n            display: "block",\n            transition: "all 300ms"\n        });\n\n        Object.assign(this.style, {\n            outline: "100vw solid transparent",\n            transition: "all 300ms",\n            pointerEvents: "auto",\n            cursor: "zoom-out"\n        });\n        Object.assign(document.body.style, {\n            pointerEvents: "none"\n        });\n\n        (( /*animate*/ ) => {\n            const scrollTop = window.pageYOffset;\n            const viewportX = (document.documentElement.clientWidth / 2);\n            const viewportY = scrollTop + (document.documentElement.clientHeight / 2);\n            const imageCenterX = imageOffset.left + (this.width / 2);\n            const imageCenterY = imageOffset.top + (this.height / 2);\n            const tx = viewportX - imageCenterX;\n            const ty = viewportY - imageCenterY;\n            const tz = 0;\n\n            Object.assign(this.parentElement.style, {\n                transform: `translate3d(${tx}px, ${ty}px, ${tz}px)`\n            });\n            Object.assign(this.style, {\n                outlineColor: "#fff",\n                transform: `scale(${scale})`\n            });\n\n        })();\n    }\n\n    zoomOut() {\n        const sleep = ms =>\n            new Promise((resolve) => window.setTimeout(resolve, ms));\n\n        (async function cleanup() {\n            Object.assign(this.parentElement.style, {\n                transform: `none`\n            });\n            Object.assign(this.style, {\n                outlineColor: "transparent",\n                transform: this.preservedTransform\n            });\n\n            await sleep(300);\n\n            Object.assign(this.parentElement.style, {\n                display: "",\n                transition: ""\n            });\n            Object.assign(this.style, {\n                outline: "",\n                outlineColor: "",\n                transition: "",\n                cursor: "zoom-in"\n            });\n\n            Object.assign(document.body.style, {\n                pointerEvents: "auto"\n            });\n            this.parentElement.zoomListeners("remove");\n            // Restart\n            this.parentElement.connectedCallback();\n\n        }).call(this);\n    }\n\n    zoomListeners(remove) {\n        if (remove) {\n            document.removeEventListener("scroll", this.zoomEvents.zoomOutHandler);\n            document.removeEventListener("keyup", this.zoomEvents.keyUp);\n            document.removeEventListener("touchstart", this.zoomEvents.handleTouchStart);\n            document.removeEventListener("click", this.zoomEvents.zoomOutHandler, true);\n        } else {\n            document.addEventListener("scroll", this.zoomEvents.zoomOutHandler, { once: true });\n            document.addEventListener("keyup", this.zoomEvents.keyUp, { once: true });\n            document.addEventListener("touchstart", this.zoomEvents.handleTouchStart, { once: true });\n            document.addEventListener("click", this.zoomEvents.zoomOutHandler, { capture: true, once: true });\n        }\n    }\n}\ncustomElements.define(\'zoom-js\', ZoomJS);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}]);